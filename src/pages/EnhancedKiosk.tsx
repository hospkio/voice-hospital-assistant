import React, { useEffect, useRef } from 'react';
import KioskHeader from '@/components/KioskHeader';
import KioskFooter from '@/components/KioskFooter';
import MainKioskInterface from '@/components/MainKioskInterface';
import AppointmentBookingModal from '@/components/AppointmentBookingModal';
import { useKioskState } from '@/hooks/useKioskState';
import { useDialogflowCXService } from '@/hooks/useDialogflowCXService';
import { useGoogleCloudServices } from '@/hooks/useGoogleCloudServices';
import { useAutoLanguageDetection } from '@/hooks/useAutoLanguageDetection';
import { useToast } from '@/hooks/use-toast';
import { hospitalDataService } from '@/services/hospitalDataService';

const EnhancedKiosk = () => {
  const { toast } = useToast();
  const { state, updateState } = useKioskState();
  const { processWithDialogflowCX } = useDialogflowCXService();
  const { textToSpeech, playAudio } = useGoogleCloudServices();
  const { startListening: detectLanguage } = useAutoLanguageDetection();
  const greetingTriggeredRef = useRef(false);

  // Welcome message on load
  useEffect(() => {
    const welcomeMessage = {
      responseText: "üåü Welcome to MediCare Smart Kiosk! Your intelligent healthcare assistant powered by advanced AI and voice recognition technology. I can help you with hospital directions, appointment bookings, department information, and much more - all in multiple languages including English, Hindi, Tamil, Malayalam, Telugu, and more!",
      intent: 'welcome',
      entities: {},
      confidence: 1.0,
      responseTime: 0,
      responseData: { 
        type: 'welcome',
        features: ['voice-recognition', 'face-detection', 'multi-language', 'navigation', 'appointments']
      },
      success: true
    };
    updateState({ currentResponse: welcomeMessage });
  }, [updateState]);

  const handleAutoGreeting = async () => {
    if (greetingTriggeredRef.current) {
      console.log('üö´ Auto-greeting already triggered, skipping');
      return;
    }

    greetingTriggeredRef.current = true;
    console.log('üéØ Auto-greeting triggered by face detection');
    updateState({ isAutoDetecting: true });
    
    const enhancedGreetings = {
      'en-US': "Hello and welcome to MediCare Hospital! I'm your intelligent AI assistant, here to help you with directions, appointments, and hospital information. I can understand and respond in multiple languages. How may I assist you today?",
      'ta-IN': "‡Æµ‡Æ£‡Æï‡Øç‡Æï‡ÆÆ‡Øç! ‡ÆÆ‡ØÜ‡Æü‡Æø‡Æï‡Øá‡Æ∞‡Øç ‡ÆÆ‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æµ‡ÆÆ‡Æ©‡Øà‡Æï‡Øç‡Æï‡ØÅ ‡Æµ‡Æ∞‡Æµ‡Øá‡Æ±‡Øç‡Æï‡Æø‡Æ±‡Øã‡ÆÆ‡Øç! ‡Æ®‡Ææ‡Æ©‡Øç ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ™‡ØÅ‡Æ§‡Øç‡Æ§‡Æø‡Æö‡Ææ‡Æ≤‡Æø AI ‡Æâ‡Æ§‡Æµ‡Æø‡ÆØ‡Ææ‡Æ≥‡Æ∞‡Øç. ‡Æ§‡Æø‡Æö‡Øà‡Æï‡Æ≥‡Øç, ‡ÆÖ‡Æ™‡Øç‡Æ™‡Ææ‡ÆØ‡Æø‡Æ£‡Øç‡Æü‡Øç‡ÆÆ‡ØÜ‡Æ©‡Øç‡Æü‡Øç‡Æï‡Æ≥‡Øç, ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡ÆÆ‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æµ‡ÆÆ‡Æ©‡Øà ‡Æ§‡Æï‡Æµ‡Æ≤‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡Æ®‡Ææ‡Æ©‡Øç ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡Æâ‡Æ§‡Æµ ‡ÆÆ‡ØÅ‡Æü‡Æø‡ÆØ‡ØÅ‡ÆÆ‡Øç. ‡Æ™‡Æ≤ ‡ÆÆ‡Øä‡Æ¥‡Æø‡Æï‡Æ≥‡Æø‡Æ≤‡Øç ‡Æ™‡Øá‡Æö‡Æø ‡Æ™‡ØÅ‡Æ∞‡Æø‡Æ®‡Øç‡Æ§‡ØÅ‡Æï‡Øä‡Æ≥‡Øç‡Æ≥ ‡ÆÆ‡ØÅ‡Æü‡Æø‡ÆØ‡ØÅ‡ÆÆ‡Øç. ‡Æá‡Æ©‡Øç‡Æ±‡ØÅ ‡Æ®‡Ææ‡Æ©‡Øç ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡Æé‡Æ™‡Øç‡Æ™‡Æü‡Æø ‡Æâ‡Æ§‡Æµ ‡ÆÆ‡ØÅ‡Æü‡Æø‡ÆØ‡ØÅ‡ÆÆ‡Øç?",
      'ml-IN': "‡¥®‡¥Æ‡¥∏‡µç‡¥ï‡¥æ‡¥∞‡¥Ç! ‡¥Æ‡µÜ‡¥°‡¥ø‡¥ï‡µÜ‡¥Ø‡µº ‡¥π‡µã‡¥∏‡µç‡¥™‡¥ø‡¥±‡µç‡¥±‡¥≤‡¥ø‡¥≤‡µá‡¥ï‡µç‡¥ï‡µç ‡¥∏‡µç‡¥µ‡¥æ‡¥ó‡¥§‡¥Ç! ‡¥û‡¥æ‡µª ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥¨‡µÅ‡¥¶‡µç‡¥ß‡¥ø‡¥Æ‡¥æ‡¥®‡¥æ‡¥Ø AI ‡¥Ö‡¥∏‡¥ø‡¥∏‡µç‡¥±‡µç‡¥±‡¥®‡µç‡¥±‡¥æ‡¥£‡µç. ‡¥¶‡¥ø‡¥∂‡¥ï‡µæ, ‡¥Ö‡¥™‡µç‡¥™‡µã‡¥Ø‡¥ø‡¥®‡µç‡¥±‡µç‡¥Æ‡µÜ‡¥®‡µç‡¥±‡µÅ‡¥ï‡µæ, ‡¥Ü‡¥∂‡µÅ‡¥™‡¥§‡µç‡¥∞‡¥ø ‡¥µ‡¥ø‡¥µ‡¥∞‡¥ô‡µç‡¥ô‡µæ ‡¥é‡¥®‡µç‡¥®‡¥ø‡¥µ‡¥Ø‡¥ø‡µΩ ‡¥∏‡¥π‡¥æ‡¥Ø‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡µª ‡¥û‡¥æ‡µª ‡¥á‡¥µ‡¥ø‡¥ü‡µÜ‡¥Ø‡µÅ‡¥£‡µç‡¥ü‡µç. ‡¥™‡¥≤ ‡¥≠‡¥æ‡¥∑‡¥ï‡¥≥‡¥ø‡¥≤‡µÅ‡¥Ç ‡¥∏‡¥Ç‡¥∏‡¥æ‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡¥®‡µÅ‡¥Ç ‡¥Æ‡¥®‡¥∏‡µç‡¥∏‡¥ø‡¥≤‡¥æ‡¥ï‡µç‡¥ï‡¥æ‡¥®‡µÅ‡¥Ç ‡¥ï‡¥¥‡¥ø‡¥Ø‡µÅ‡¥Ç‡•§ ‡¥á‡¥®‡µç‡¥®‡µç ‡¥é‡¥®‡¥ø‡¥ï‡µç‡¥ï‡µç ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÜ ‡¥é‡¥ô‡µç‡¥ô‡¥®‡µÜ ‡¥∏‡¥π‡¥æ‡¥Ø‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡¥Ç?",
      'hi-IN': "‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•á‡§°‡§ø‡§ï‡•á‡§Ø‡§∞ ‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤ ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à! ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§¨‡•Å‡§¶‡•ç‡§ß‡§ø‡§Æ‡§æ‡§® AI ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§π‡•Ç‡§Ç‡•§ ‡§¶‡§ø‡§∂‡§æ-‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂, ‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü, ‡§î‡§∞ ‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Æ‡•à‡§Ç ‡§Ø‡§π‡§æ‡§Ç ‡§π‡•Ç‡§Ç‡•§ ‡§ï‡§à ‡§≠‡§æ‡§∑‡§æ‡§ì‡§Ç ‡§Æ‡•á‡§Ç ‡§¨‡§æ‡§§ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§î‡§∞ ‡§∏‡§Æ‡§ù ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§ ‡§Ü‡§ú ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•à‡§∏‡•á ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç?",
      'te-IN': "‡∞®‡∞Æ‡∞∏‡±ç‡∞ï‡∞æ‡∞∞‡∞Ç! ‡∞Æ‡±Ü‡∞°‡∞ø‡∞ï‡±á‡∞∞‡±ç ‡∞π‡∞æ‡∞∏‡±ç‡∞™‡∞ø‡∞ü‡∞≤‡±ç‚Äå‡∞ï‡±Å ‡∞∏‡±ç‡∞µ‡∞æ‡∞ó‡∞§‡∞Ç! ‡∞®‡±á‡∞®‡±Å ‡∞Æ‡±Ä ‡∞§‡±Ü‡∞≤‡∞ø‡∞µ‡±à‡∞® AI ‡∞∏‡∞π‡∞æ‡∞Ø‡∞ï‡±Å‡∞°‡∞®‡±Å‡•§ ‡∞¶‡∞ø‡∞∂‡∞≤‡±Å, ‡∞Ö‡∞™‡∞æ‡∞Ø‡∞ø‡∞Ç‡∞ü‡±ç‚Äå‡∞Æ‡±Ü‡∞Ç‡∞ü‡±ç‡∞≤‡±Å, ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞π‡∞æ‡∞∏‡±ç‡∞™‡∞ø‡∞ü‡∞≤‡±ç ‡∞∏‡∞Æ‡∞æ‡∞ö‡∞æ‡∞∞‡∞Ç ‡∞ï‡±ã‡∞∏‡∞Ç ‡∞®‡±á‡∞®‡±Å ‡∞á‡∞ï‡±ç‡∞ï‡∞° ‡∞â‡∞®‡±ç‡∞®‡∞æ‡∞®‡±Å‡•§ ‡∞Ö‡∞®‡±á‡∞ï ‡∞≠‡∞æ‡∞∑‡∞≤‡∞≤‡±ã ‡∞Æ‡∞æ‡∞ü‡±ç‡∞≤‡∞æ‡∞°‡∞ó‡∞≤‡∞®‡±Å ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞Ö‡∞∞‡±ç‡∞•‡∞Ç ‡∞ö‡±á‡∞∏‡±Å‡∞ï‡±ã‡∞ó‡∞≤‡∞®‡±Å‡•§ ‡∞à‡∞∞‡±ã‡∞ú‡±Å ‡∞®‡±á‡∞®‡±Å ‡∞Æ‡±Ä‡∞ï‡±Å ‡∞é‡∞≤‡∞æ ‡∞∏‡∞π‡∞æ‡∞Ø‡∞Ç ‡∞ö‡±á‡∞Ø‡∞ó‡∞≤‡∞®‡±Å?"
    };

    try {
      console.log('üîä Playing enhanced greeting with visual feedback');
      
      toast({
        title: "üëã Welcome! Face Detected",
        description: "AI Assistant is now active and ready to help you. Please speak clearly.",
        duration: 8000,
      });

      const greeting = enhancedGreetings[state.selectedLanguage] || enhancedGreetings['en-US'];
      
      const greetingResponse = {
        responseText: greeting,
        intent: 'auto-greeting',
        entities: {},
        confidence: 1.0,
        responseTime: 0,
        responseData: { 
          type: 'auto-greeting', 
          triggered: 'face-detection',
          language: state.selectedLanguage,
          timestamp: new Date().toISOString()
        },
        success: true
      };

      updateState({ 
        currentResponse: greetingResponse,
        conversationHistory: [...state.conversationHistory, {
          type: 'assistant',
          content: greeting,
          timestamp: new Date(),
          intent: 'auto-greeting',
          confidence: 1.0,
          trigger: 'face-detection',
          language: state.selectedLanguage
        }],
        lastGreetingTime: Date.now()
      });

      console.log('üéµ Starting TTS for greeting...');
      const ttsResult = await textToSpeech(greeting, state.selectedLanguage);
      
      if (ttsResult.success && ttsResult.audioContent) {
        console.log('‚úÖ Playing greeting audio...');
        await playAudio(ttsResult.audioContent);
        console.log('üéâ Greeting audio completed successfully');
        
        toast({
          title: "üé§ Voice Recognition Active",
          description: "You can now speak naturally. I'll detect your language automatically.",
          duration: 5000,
        });
        
        // Reset greeting trigger after successful greeting
        setTimeout(() => {
          greetingTriggeredRef.current = false;
          console.log('üîÑ Greeting trigger reset - ready for next detection');
        }, 30000);
        
      } else {
        console.error('‚ùå TTS failed:', ttsResult.error);
        greetingTriggeredRef.current = false;
        toast({
          title: "‚ö†Ô∏è Audio Issue",
          description: "Face detected but audio playback failed. You can still use voice commands.",
          variant: "destructive",
        });
      }

    } catch (error) {
      console.error('üí• Auto-greeting error:', error);
      greetingTriggeredRef.current = false;
      
      toast({
        title: "‚ö†Ô∏è System Error",
        description: "Face detected but greeting system failed. Please use voice commands manually.",
        variant: "destructive",
      });
    } finally {
      updateState({ isAutoDetecting: false });
    }
  };

  const handleVoiceInput = async (transcript: string, confidence: number, detectedLanguage: string) => {
    console.log('üé§ Processing voice input:', { transcript, confidence, detectedLanguage });
    
    if (detectedLanguage !== state.selectedLanguage) {
      updateState({ selectedLanguage: detectedLanguage });
      console.log('üåê Language auto-switched to:', detectedLanguage);
      
      toast({
        title: "üåç Language Auto-Detected",
        description: `Now responding in ${detectedLanguage}`,
        duration: 3000,
      });
    }
    
    await hospitalDataService.createOrUpdateKioskSession(state.sessionId, detectedLanguage);
    
    const newHistory = [...state.conversationHistory, {
      type: 'user',
      content: transcript,
      timestamp: new Date(),
      language: detectedLanguage,
      confidence
    }];

    console.log('ü§ñ Processing with Dialogflow CX...');
    const dialogflowResponse = await processWithDialogflowCX(transcript, state.sessionId, detectedLanguage);
    
    if (dialogflowResponse.intent?.toLowerCase().includes('appointment')) {
      updateState({ showAppointmentModal: true });
    }
    
    let selectedDepartment = state.selectedDepartment;
    if (dialogflowResponse.responseData?.department) {
      selectedDepartment = dialogflowResponse.responseData.department;
    }
    
    updateState({
      currentResponse: dialogflowResponse,
      selectedDepartment,
      conversationHistory: [...newHistory, {
        type: 'assistant',
        content: dialogflowResponse.responseText,
        timestamp: new Date(),
        intent: dialogflowResponse.intent,
        confidence: dialogflowResponse.confidence,
        language: detectedLanguage
      }]
    });

    try {
      console.log('üîä Playing response audio...');
      const ttsResult = await textToSpeech(dialogflowResponse.responseText, detectedLanguage);
      if (ttsResult.success && ttsResult.audioContent) {
        await playAudio(ttsResult.audioContent);
        console.log('‚úÖ Response audio played successfully');
      } else {
        console.error('‚ùå Response audio failed:', ttsResult.error);
      }
    } catch (error) {
      console.error('üí• Response audio playback failed:', error);
    }

    toast({
      title: "üé§ Voice Processed Successfully",
      description: `Language: ${detectedLanguage} (${Math.round(confidence * 100)}% confidence)`,
      duration: 3000,
    });
  };

  const handleFaceDetection = (detected: boolean, count: number) => {
    updateState({ facesDetected: detected, faceCount: count });
    
    if (detected) {
      console.log(`üë• Face detection updated: ${count} face(s) detected`);
    }
  };

  const handleQuickAction = async (query: string) => {
    console.log('‚ö° Quick action triggered:', query);
    await handleVoiceInput(query, 1.0, state.selectedLanguage);
  };

  const handleDepartmentSelect = (department: string) => {
    updateState({ selectedDepartment: department });
    handleQuickAction(`Tell me about ${department} department and show me directions`);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-green-50 flex flex-col touch-manipulation selection:bg-blue-200">
      <KioskHeader
        facesDetected={state.facesDetected}
        faceCount={state.faceCount}
        selectedLanguage={state.selectedLanguage}
        autoInteractionEnabled={state.autoInteractionEnabled}
        onLanguageChange={(lang) => updateState({ selectedLanguage: lang })}
        onToggleAutoInteraction={() => updateState({ 
          autoInteractionEnabled: !state.autoInteractionEnabled 
        })}
      />

      <MainKioskInterface
        state={state}
        isListening={state.isListening}
        onVoiceData={handleVoiceInput}
        onListeningChange={(listening) => updateState({ isListening: listening })}
        onFaceDetected={handleFaceDetection}
        onQuickAction={handleQuickAction}
        onDepartmentSelect={handleDepartmentSelect}
        onShowAppointmentModal={() => updateState({ showAppointmentModal: true })}
        onAutoGreetingTriggered={handleAutoGreeting}
      />

      <KioskFooter />

      <AppointmentBookingModal
        isOpen={state.showAppointmentModal}
        onClose={() => updateState({ showAppointmentModal: false })}
        department={state.selectedDepartment}
      />
    </div>
  );
};

export default EnhancedKiosk;
